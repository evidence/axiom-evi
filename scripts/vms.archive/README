                            AXIOM NIC simulation
===============================================================================

This archive contains the following files and folders:

 * Makefile
 * axiom_switch
 * qemu-system-aarch64
 * start-qemu.sh
 * images


## 1. Run simulation

In this archive there is a Makefile to run a simulator.
```
cd scripts
make VMS=<number of nodes> run
```
Example:
```
# run 4 nodes with default axiom-switch (ring topology)
make VMS=4 run
# show the log file
make log
# shutdown the vms and the switch
make stop

# run 4 nodes and show log
make VMS=4 run log
# (CTRL-C) to shutdown the vms and the switch
```



## 2. Run application inside the nodes

The AXIOM NIC device driver and the user-space
applications are compiled and installed in the nodes filesystem.

After the boot, all nodes autologin with root privileges.
Otherwise the credentials are:

 * user: root
 * password: *empty*

The AXIOM NIC device driver and the AXIOM ethernet tap (user space application) should start
on device startup.
You must choose a node and set it as master executing this command:
````
axiom-make-master
````
After that this node reconfigure itself as "master node", end the node discovery protocol and
configure an ethernet device for intra-node comunication (assigning an IP address).


#### run applications in the nodes:

 * axiom-info
    + print informations (node-id, interfaces, routing, etc.) about AXIOM NIC
```
        example:
        # print all information
        axiom-info
```
```
        # print nodeid
        axiom-info -n
```
```
        # print routing table
        axiom-info -r
```
 * axiom-whoami
     + print the node-id set after the discovery phase
```
        example:
        axiom-whoami
```
 * axiom-ping
    + estimate the round trip time (RTT) between two nodes
```
        example:
        # Estimate RTT with target node 2. Send a ping message every 0.5 seconds.
        axiom-ping -d 2 -i 0.5
```
```
        # Estimante RTT with target node 2. Send 10 ping message every 0.2 seconds.
        axiom-ping -d 2 -c 10 -i 0.2
```
 * axiom-netperf
    + estimate the throughput between two nodes
```
        example:
        # Estimate the throughput with targat node 3, sending 512 KBytes of data
        # using RAW messages.
        axiom-netperf -d 3 -l 512K -t raw
```
```
        # Estimate the throughput with targat node 3, sending 2 MBytes of data.
        # using LONG messages.
        axiom-netperf -d 3 -l 2M -t long
```
 * axiom-traceroute
    + print the hops needed to reach a specified target node
```
        example:
        # Print the hops needed to reach the node 1
        axiom-traceroute -d 1
```
 * axiom-[send|recv]
     + send/receive Axiom RAW/LONG data to/from a node
```
        examples:
        # receive RAW message
        axiom-recv -t raw
```
```
        # receive LONG message
        axiom-recv -t long
```
```
        # send RAW data to node (node_id=4) with a specified payload
        axiom-send -t raw -d 4   112 43 0 57 33
```
```
        # send RAW data to a neighbour directly connected on a local
        # interface (if_id=1) with a specified payload
        axiom-send -t raw -d 1 --neighbour   67 52 1 0 1 0
```
```
        # send LONG data to node (node_id=0) with a specified payload
        axiom-send -t long -d 0   112 43 0 57 33
```
 * axiom-run
    + spawn application on multiple nodes
```
        # run ls on remote node 1 (-n) and redirect (-r) the stdin/stdout/stderr
        axiom-run -n 1 -r ls
```
```
        # run ls on all nodes, redirect (-r) the stdin/stdout/stderr and print
        # the node id in each line (-i)
        axiom-run -r -i ls
```
 * axiom-rdma
     + use RDMA features (remote write, remote read) of Axiom NIC
```
        examples:
        # write 3 Kbytes in the RDMA zone of remote node reading from the local
        # RDMA zone filled with the bytes (1, 2, 3, 4) repeated many times to
        # fill the size specified (add -v to see the dump)
        axiom-run -P all -n 1,2 axiom-rdma -m w -s 3k 1 2 3 4
```
```
        # read 1 Kbytes in the RDMA zone of remote node reading from the remote
        # RDMA zone filled with the bytes (5, 0, 1) repeated many times to
        # fill the size specified (add -v to see the dump)
        axiom-run -P all -n 1,2 axiom-rdma -m r -s 1k 5 0 1
```
