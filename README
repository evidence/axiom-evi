                            AXIOM Software Stack
===============================================================================

This repository contains the following git sub-modules:

 * axiom-allocator
    + Implementation of the three level AXIOM allocator
 * axiom-evi-allocator-drv
    + Implementation of the memory device to handle virtual to physical memory mapping
 * axiom-evi-allocator-lib
    + Implementation of 3rd level software allocator based on LMM
 * axiom-evi-apps
    + Implementation of AXIOM application and daemons (axiom-init, axiom-run, etc.)
 * axiom-evi-extrae
    + Modified version of Extrae to support IOCTL and AXIOM api
 * axiom-evi-gasnet
    + Modified version of GASNet that includes the new AXIOM conduit
 * axiom-evi-mcxx
    + Modified version of mcxx to support AXIOM GASNet conduit and cross-compilation
 * axiom-evi-nanox
    + Modified version of nanox to support AXIOM GASNet conduit and cross-compilation
 * axiom-evi-nic
    + Implementation of AXIOM NIC device driver and User Space libraries

## 1. Prerequisite to build the Software Stack

For the last release of the requested software see Axiom wiki.
```
https://wiki.axiom-project.eu/index.php/WP5_-_AXIOM_Software_Stack
https://wiki.axiom-project.eu/index.php/WP6_-_ARCHITECTURE_IMPLEMENTATION/BSP/ComponentsAndSources
```

### 1.1 Axiom file-system

You must have a copy of the Axiom file-system.
```
$ wget -c https://upload.axiom-project.eu/uploads/WP5.1/filesystems/aarch64/zynq-ubuntu-minimal_16.04-xenial_v1.3.tar.gz
$ mkdir zynq-ubuntu-minimal_16.04-xenial_v1.3
$ ln -s zynq-ubuntu-minimal_16.04-xenial_v1.3 zynq-rootfs
$ cd zynq-ubuntu-minimal_16.04-xenial_v1.3
$ tar xvf ../zynq-ubuntu-minimal_16.04-xenial_v1.3.tar.gz
```

### 1.2  Linaro

You must have the Linaro toolchain for AARCH64.
The directory of the Linaro toolchain must have a specific structure and must have
some link as show below.
You should use these linaro packages:
  * gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu.tar.xz
  * runtime-gcc-linaro-5.3.1-2016.05-aarch64-linux-gnu.tar.xz
  * sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu.tar.xz

```
$ mkdir linaro
$ cd linaro
$ wget -c  https://releases.linaro.org/components/toolchain/binaries/5.3-2016.05/aarch64-linux-gnu/gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu.tar.xz
$ wget -c  https://releases.linaro.org/components/toolchain/binaries/5.3-2016.05/aarch64-linux-gnu/runtime-gcc-linaro-5.3.1-2016.05-aarch64-linux-gnu.tar.xz
$ wget -c  https://releases.linaro.org/components/toolchain/binaries/5.3-2016.05/aarch64-linux-gnu/sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu.tar.xz
$ tar xJvf gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu.tar.xz
$ tar xJvf runtime-gcc-linaro-5.3.1-2016.05-aarch64-linux-gnu.tar.xz
$ tar xJvf sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu.tar.xz
$ ln -s gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu host
$ ln -s sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu sysroot
$ ln -s . host/usr
$ ln -s /usr/bin/pkg-config host/bin/aarch64-linux-gnu-pkg-config
$ cd ..
```

### 1.3 Petalinux

You should have installed Petalinux.
```
$ wget -c https://upload.axiom-project.eu/uploads/WP5.1/tools/petalinux-v2016.3-final-installer.run
$ ./petalinux-v2016.3-final-installer.run
$ ln -s petalinux-v2016.3-final petalinux

```

### 1.4 Axiom BSP

You must have installed the last Axiom BSP.
```
$ mkdir bsp
$ cd bsp
$ wget -c https://upload.axiom-project.eu/uploads/WP5.1/BSP_pre-built/AXIOM-ZU9EG-BSP-2016.3_v1.6.bsp
$ mv AXIOM-ZU9EG-BSP-2016.3_v1.6.bsp AXIOM-ZU9EG-BSP-2016.3_v1.6.bsp.tar.gz
$ tar xzvf  AXIOM-ZU9EG-BSP-2016.3_v1.6.bsp.tar.gz
$ mv AXIOM-ZU9EG-2016.3 AXIOM-ZU9EG-BSP-2016.3_v1.6
$ ln -s AXIOM-ZU9EG-BSP-2016.3_v1.6 AXIOM-ZU9EG-2016.3
$ cd ..
```

### 1.5 Compile the kernel using Petalinux

You must compile the kernel.
```
$ source petalinux/settings.sh
$ cd bsp/AXIOM-ZU9EG-2016.3
$ petalinux-config --verbose -c kernel
$ petalinux-build --verbose
$ petalinux-package --boot
```
**WARNING:** sourcing 'petalinux/settings.sh' inserts into the environment a toolchain that does not work to build the Axiom software stack. You must clean the environment to build the Axiom software stack.

**WARNING:** petalinux suggest to use bash as default system shell
```
$ sudo ln -sf /bin/bash /bin/sh
```

## 2. Download the code

### 2.1 Clone the repository
```
$ git clone https://git.axiom-project.eu/axiom-evi
$ cd axiom-evi
```
**NOTE:**
Can be useful to add the following line to ~/.ssh/config
```
Host git.axiom-project.eu
     HostName git.axiom-project.eu
     Port 22
     User YOUR_AXIOM_PROJECT_NAME

```
and to add some lines to ~/.gitconfig
```
[user]
        name = YOUR_NAME
        email = YOUR_EMAIL
        
[http]
        sslverify = false

[credential]
        helper = store	

```

### 2.2 Init the sub-modules (may take awhile)
```
$ ./scripts/submodules_update.sh
```

## 3. AXIOM Software Stack compilation

This section explains how to configure and compile the AXIOM sub-modules.

**Requirements:**

Note that some packages required for a build can be missing.  
For example into a Ubuntu 16.04 LTS you should have installed the following packages:
```
$ sudo apt-get install build-essential git libssl-dev libncurses5-dev gawk bison wget
$ sudo apt-get install flex bc pkg-config libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev
$ sudo apt-get install linux-tools-generic linux-headers-generic autoconf automake gfortran libxml2-dev
$ sudo apt-get install libtool-bin libsqlite3-dev gperf debhelper fakeroot fakechroot qemu-user-static
$ sudo apt-get install automake autoconf libtool

```

### 3.1 Prepare the system

Change the environment variables into ```axiom-evi/settings.sh```.

* PETALINUX
    + You must have installed PetaLinux 2016.3; this must point to the installation directory
    + (default ```$HOME/petalinux```)

* AXIOMBSP
    + You must have installed SECO Petalinux project BSP; this must point to the BSP directory
    + (default ```$HOME/bsp/AXIOM-ZU9EG-2016.3```)

* LINARO
    + You must have a linaro toolchain; this must point to the linaro directory
    + (default $HOME/linaro)
    + You should use these linaro packages:
        * gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu.tar.xz
        * runtime-gcc-linaro-5.3.1-2016.05-aarch64-linux-gnu.tar.xz
        * sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu.tar.xz
    + The linaro installation directory must have the following layout:
```
            ${LINARO}/
            ${LINARO}/runtime-gcc-linaro-5.3.1-2016.05-aarch64-linux-gnu
            ${LINARO}/sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu
            ${LINARO}/gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu
            ${LINARO}/host (link to gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu)
            ${LINARO}/sysroot (link to sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu)
```

    + After the installation you must create a symbolic link "usr" to linaro/host directory:
```
            cd ${LINARO}/host
            ln -s . usr
```

    + Then you must create a link "aarcha64-linux-gnu-pkg-config" to pkg-config:
```
            cd ~/linaro/host/usr/bin
            ln -s /usr/bin/pkg-config aarcha64-linux-gnu-pkg-config
```

* ROOTFS
    + You must have extracted the Seco Ubuntu filesystem image; this must point to the installation directory
    + (default $HOME/zynq-rootfs)
    + Usually $HOME/zynq-rootfs is a link to $HOME/zynq-ubuntu-minimal_16.04-xenial_v1.3

    + NOTE: in zynq-rootfs/usr/lib/aarch64-linux-gnu there are .so with absolute link.  
    Extrae try to use libdl.so (link to /lib/aarch64-linux-gnu/libdl.so.2)  
    To fix this issue:
```
        cd zynq-rootfs/usr/lib/aarch64-linux-gnu
        rm libdl.so
        ln -s ../../../lib/aarch64-linux-gnu/libdl.so.2 libdl.so
```

* ROOTFSARCH
     + You must have a copy of the rootfs archive
     + (default $HOME/zynq-ubuntu-minimal_16.04-xenial_v1.3.tar.gz)

### 3.2 Compile the system

#### 3.2.1 Include settings file

To compile the system you must include the settings.sh into your environment, before to use the Makefile

```
    $ source axiom-evi/settings.sh
```

**Note** that the environment must be clean (i.e. you can not include the petalinux's settings)

#### 3.2.2 Define ```make``` variables

If you go into the ```scripts``` directory and do the command ```make``` for the first time, an help will be show:
```
    $ cd scripts
    $ make
    configure.mk:113: *** Command line environment variables not defined!
    You must define some variable on the command line (for example "make MODE=aarch64"):
    * MODE (required)
       aarch64: use linaro to cross-compile for arm 64bit
       x86: use native x86 kernel on rootfs
    * DISABLE_INSTR (optional, used during libraries compilation)
       0: compile EXTRAE and nic user library with instrumentation support (default)
       1: disable EXTRAE compilation and nic user library instrumentation
    * KVERSION (optional, used to compile X86 in a choroot)
       you must defined this if you are compiling for X86 from a chroot and must be
       set to the kernel version (otherwise a "uname -r" is used using the chroot host
       kernel version)
    * DFLAGS (optional, other gcc parameters to add during compilation
    Note that:
    MODE and DISABLE_INSTR must defined during "make configure" and never changed.
    KVERSION should be defined only for X86 chroot compilation during "make configure".
).  Stop.

```

#### 3.2.3 Configure the system

```
    $ make MODE=XXX DISABLE_INSTR=XXX configure
```

where XXX is the values specified in the 2.2.2 section

#### 3.2.4 Compile the system

```
    $ make all
```
**Note** that a temp overlay rootfs is mounted under ~/axiom-evi/rootfs-tmp and is used
to install the sub-projects applications/libraries; this rootfs must be mounted if you use
the make command from the sub-projects; this can be accomplished using the following command from the ~/axiom-evi/scripts directory
```
    $ make prepare-install
```


#### 3.2.5 Generate DEB packages

```
    $ make deb
```
The debian packages are generated into the ```axiom-evi/debs``` directory.

```
    $ make deb-tests    
```
Generate the tests debian packages.
After the generation of the debian packages the command

### 3.3 Update the sub-modules

The best way to compile a new release is to clear the previous compilation to be sure to have a clean state and update each sub-modules.

```
    $ cd axiom-evi/scripts
    $ make mrproper
    $ ./submodules_pull.sh
    $ make MODE=XXX DISABLE_INSTR=XXX configure
    $ make all
```

### 3.4 Note for x86 compilation

* the user that compile the software must be into the sudoers file (but it is not necessary to use a "sudo make .....")
* the system shell should be bash, so there must be a link from /bin/sh to bash
* the linux-tools-generic and linux-headers-generic packages must be installed

## 5. Note to compile an Axiom application

### 5.1 Standalone application

You must link your application using the supplied linker script.
(This script include some entry point requested by the axiom memory manager).
You should add something like this into the makefile:
```
LDFLAGS += -Wl,-T~/axiom-evi/axiom-evi-allocator-lib/ldscript/aarch64/xs_map64.lds
```
or, if you are compiling on the board,
```
LDFLAGS += -Wl,-T/usr/axiom-evi-allocator-lib/xs_map64.lds
```
You could also use pkg-config:
```
pkg-config --libs evi_lmm
```

### 5.2 OMPSS@Cluster

To compile a OMPSS@Cluster application you should use
```
--ompss --cluster
```
during compilation. You must use the following flags during the link phase
```
--rdynamic -Wl,-T~/axiom-evi/axiom-evi-allocator-lib/ldscript/aarch64/xs_map64.lds
```
**NOTE** The ```--rdynamic``` flag is required otherwise the symbols from the supplied linker script will be discharged.
