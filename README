                            AXIOM Software Stack
===============================================================================

This repository contains the following git submodules:

 * axiom-allocator
    + Implementation of the three level AXIOM allocator
 * axiom-evi-allocator-drv
    + Implementation of the memory device to handle virtual to physical memory mapping
 * axiom-evi-allocator-lib
    + Implementation of 3th level software allocator based on LMM
 * axiom-evi-apps
    + Implementation of AXIOM application and deamons (axiom-init, axiom-run, etc.)
 * axiom-evi-extrae
    + Modified version of Extrae to support IOCTL and AXIOM api
 * axiom-evi-gasnet
    + Modified version of GASNet that includes the new AXIOM conduit
 * axiom-evi-mcxx
    + Modified version of mcxx to support AXIOM GASNet conduit and cross-compilation
 * axiom-evi-nanox
    + Modified version of nanox to support AXIOM GASNet conduit and cross-compilation
 * axiom-evi-nic
    + Implementation of AXIOM NIC device driver and User Space libraries

The following submodules are used only for QEMU emulation:

 * axiom-evi-buildroot
    + Modified version of Buildroot to support AXIOM board
 * axiom-evi-linux
    + Modified version of Linux kernel to support AXIOM board
 * axiom-evi-qemu
    + Modified version of QEMU to emulate the AXIOM-NIC device
 * axiom-evi-u-boot
    + Modified version of u-boot to support AXIOM board
 * arm-trusted-firmware

For QEMU emulation, please see the README.qemu


## 1. Download the code

### 1.1 Clone the repository
```
$ git clone https://git.axiom-project.eu/axiom-evi
$ cd axiom-evi
```

### 1.2 Init the submodules (may take awhile)
```
$ ./scripts/submodules_update.sh
```


## 2. AXIOM Software Stack compilation

This section explains how to configure and compile the AXIOM submodules.

**Requirements:**

Note that some packages required for a build can be missing.  
For example into a Ubuntu 16.04 LTS you should have installed the following packaes:
```
sudo apt install build-essential git libssl-dev libncurses5-dev gawk bison wget
flex bc pkg-config libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev
linux-tools-generic linux-headers-generic autoconf automake gfortran libxml2-dev
libtool-bin libsqlite3-dev gperf debhelper fakeroot fakechroot qemu-user-static
```

### 2.1 Prepare the system

Change the environent variables into ```axiom-evi/settings.sh```.

* PETALINUX
    + You must have installed PetaLinux 2016.3; this must point to the installation directory
    + (default ```$HOME/petalinux```)

* AXIOMBSP
    + You must have installed SECO Petalinux project BSP; this must point to the BSP directory
    + (default ```$HOME/bsp/AXIOM-ZU9EG-2016.3```)

* LINARO
    + You must have a linaro toolchains; this must point to the linaro directory
    + (default $HOME/linaro)
    + SECO Ubuntu FS image use these linaro packages:
        * gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu.tar.xz
        * runtime-gcc-linaro-5.3.1-2016.05-aarch64-linux-gnu.tar.xz
        * sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu.tar.xz
    + The linaro installation directory must have the following layout:
```
            ${LINARO}/
            ${LINARO}/runtime-gcc-linaro-5.3.1-2016.05-aarch64-linux-gnu
            ${LINARO}/sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu
            ${LINARO}/gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu
            ${LINARO}/host (link to gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu)
            ${LINARO}/sysroot (link to sysroot-glibc-linaro-2.21-2016.05-aarch64-linux-gnu)
```

    + After the installation you must create a symbolic link "usr" to linaro/host directory:
```
            cd ${LINARO}/host
            ln -s . usr
```

    + Then you must create a link "aarcha64-linux-gnu-pkg-config" to pkg-config:
```
            cd ~/linaro/host/usr/bin
            ln -s /usr/bin/pkg-config aarcha64-linux-gnu-pkg-config
```

* ROOTFS
    + Yout must have extracted the Seco Ubuntu filesystem image; this must point to the installation directory
    + (default $HOME/zynq-rootfs)
    + Usually $HOME/zynq-rootfs is a link to $HOME/zynq-ubuntu-minimal_16.04-xenial_v1.3

    + NOTE: in zynq-rootfs/usr/lib/aarch64-linux-gnu there are .so with absolute link.  
    Extrae try to use libdl.so (linkt to /lib/aarch64-linux-gnu/libdl.so.2)  
    To fix this issue:
```
        cd zynq-rootfs/usr/lib/aarch64-linux-gnu
        rm libdl.so
        ln -s ../../../lib/aarch64-linux-gnu/libdl.so.2 libdl.so
```

* ROOTFSARCH
     + You must have a copy of the rootfs archive
     + (default $HOME/zynq-ubuntu-minimal_16.04-xenial_v1.3.tar.gz)

### 2.2 Compile the system

#### 2.2.1 Include settings file

To compile the system you must include the settings.sh into your enviroment, before to use the Makefile

```
    $ source axiom-evi/settings.sh
```

**Note that the environment must be clean (i.e. you can not include the petalinux's settings)**

#### 2.2.2 Define ```make``` variables

If you go into the ```scripts``` directory and do the command ```make``` for the first time, an help will be show:
```
    $ cd scripts
    $ make
     Makefile:90: *** Command line enviroment variables not defined!
     You must define some variable on the command line (for example "make KERN=br FS=seco"):
     * KERN (required)
         br: use buildroot kernel
         seco: use seco bsp kernel (actually qemu does not work with this kernel)
         x86: use native x86 kernel on rootfs
     * FS (optional)
         br: use buildroot root fs
         seco: use seco (ubuntu xenial) root fs (default)
         x86: use native x86 rootfs
     * QEMU_SNAP (optional, used only during qemu run)
         0: the rootfs in on a static qcow2 (one for every machine)
         1: the rootfs in on a temp qcow2 snapshot (default)
     * DISABLE_INSTR (optional, used during libraries compilation)
         0: compile EXTRAE and nic user library with instrumentation support (default)
         1: disable EXTRAE compilation and nic user library instrumentation
     * KVERSION (optional, used to compile X86 in a choroot)
         you must defined this if you are compiling for X86 from a chroot and must be
         set to the kernel version (otherwise a "uname -r" is used using the chroot host
         kernel version)
     Note that:
     KERN, FS and DISABLE_INSTR must defined during "make configure" and never changed.
     KVERSION must be defined only for X86 chroot compilation during "make configure".
     QEMU_SNAP can be redefined on every invocation.
     ).  Stop.

```

#### 2.2.3 Configure the system

```
    $ make KERN=XXX FS=XXX DISABLE_INSTR=XXX configure
```

where XXX is the values specified in the 2.2.2 section

#### 2.2.4 Compile the system

```
    $ make
```

#### 2.2.5 Generate DEB packages

```
    $ make deb
```
The debian packages are generated into the ```axiom-evi/debs``` directory.

```
    $ make deb-tests    
```
Generate the tests debian packages.
After the generation of the debian packages the comand

```
    $ make clean-deb
```
clean the system (but not delete the generated packages).

### 2.3 Update the submodules

The best way to compile a new release is to clear the previous compilation to be sure to have a clean state and update each submodules.

```
    $ cd axiom-evi/scripts
    $ make mrproper
    $ ./submodules_pull.sh
    $ make KERN=XXX FS=XXX DISABLE_INSTR=XXX configure
    $ make
```

### 2.4 Note for x86 compilation

* the user that compile the software must be into the sudoers file (but it is not necessary to use a "sudo make .....")
* the system shell should be bash, so there must be a link from /bin/sh to bash
* the linux-tools-generic and linux-headers-generic packages must be installed

