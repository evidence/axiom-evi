                            AXIOM NIC simulation
===============================================================================

This repository contains the following git submodules:

 * axiom-evi-apps
 * axiom-evi-buildroot
 * axiom-evi-linux
 * axiom-evi-nic
 * axiom-evi-qemu
 * axiom-evi-u-boot
 * arm-trusted-firmware



## 1. Clone the repository

```
# clone the repository
git clone https://git.axiom-project.eu/axiom-evi
cd axiom-evi

# init the submodules (may take awhile)
./scripts/submodules_update.sh
```



## 2. Submodule Compilation

This section explains how to configure and compile the submodules.

**Requirements:**

 * QEMU required packages:  
   <http://wiki.qemu.org/Hosts/Linux#Required_additional_packages>

 * Buildroot required packages:  
   <https://buildroot.org/downloads/manual/manual.html#requirement>

To simplify this phase, we provided a makefile to automatize the compilation:
```
cd scripts/

# configure QEMU, Buildroot and the AXIOM allocator
make configure

# make all submodules and install the applications and
# the driver in the buildroot filesystem
make
```

Using the previous commands, you can avoid the following steps and you can jump
to section 3.

### 2.1 QEMU hypervisor

Qemu modified to emulate the AXIOM network card

**QEMU required packages:**  
<http://wiki.qemu.org/Hosts/Linux#Required_additional_packages>

```
cd axiom-evi-qemu
./axiom_configure.sh
make -j5
```


### 2.2 Buildroot

Bulldroot modified to support the AXIOM board

**Buildroot required packages:**  
<https://buildroot.org/downloads/manual/manual.html#requirement>

```
cd axiom-evi-buildroot

# load evi buildroot default configution
make evi_ultrascale_defconfig

# customize busybox, linux or buildroot (optional)
make busybox-menuconfig
make linux-menuconfig
make menuconfig

# compile kernel and file system
make
```

NOTES:
```
If uboot fails with error like this:
        bin/sh: 1: dtc: not found
        make[2]: *** [arch/arm/dts/zynq-zc702.dtb] Error 127
You need to install the device tree compiler:
        eg. sudo apt-get install device-tree-compiler
```

### 2.3 AXIOM switch

Used to emulate the topology between multiple VMs

```
cd axiom-evi-nic/axiom_switch/
make
```

### 2.4 AXIOM NIC device driver

Device driver for the AXIOM Network Card

```
cd axiom-evi-nic/axiom_netdev_driver/

# compile and install in the buildroot target image
make install

# (after that, you must rebuild buildroot: cd ../axiom-buildroot; make)
```

### 2.5 AXIOM applications

Axiom user space application
(eg. axiom-init, axiom-whoami, axiom-send-small, axiom-recv-small, etc.)

```
cd axiom-evi-apps

# compile and install in the buildroot target image
make install

# (after that, you must rebuild buildroot: cd ../axiom-buildroot; make)
```




## 3. Run simulation

In the "scripts" folder there is a Makefile to run a simulator.
```
cd scripts
make VMS=<number of nodes> run log
```
Example:
```
# run 4 nodes with default axiom-switch (ring topology)
make VMS=4 run
# show the log file
make log
# shutdown the vms and the switch
make stop

# run 4 nodes and show log
make VMS=4 run log
# (CTRL-C) to shutdown the vms and the switch
```



## 4. Run application inside the nodes

During the 2.4 and 2.5 steps the AXIOM NIC device driver and the user-space
applications are compiled and installed in the nodes filesystem.

After the boot, all nodes autologin with root privileges.
Otherwise the credentials are:

 * user: root
 * password: *empty*

After the login, you must load the AXIOM NIC device driver and start the
axiom-init deamon.

```
# load device driver
modprobe axiom-netdev

# start axiom-init deamon to run the the discovery algorithm, to set the
# routing table and to handle control messages

# slaves                                 # master
axiom-init &                             axiom-init -m &
```

#### run applications in the nodes:

 * axiom-info
    + print informations (node-id, interfaces, routing, etc.) about AXIOM NIC
```
        example:
        # print all information
        axiom-info
```
```
        # print nodeid
        axiom-info -n
```
```
        # print routing table
        axiom-info -r
```
 * axiom-whoami
     + print the node-id set after the discovery phase
```
        example:
        axiom-whoami
```
 * axiom-ping
    + estimate the round trip time (RTT) between two nodes
```
        example:
        # Estimate RTT with target node 2. Send a ping message every 0.5 seconds.
        axiom-ping -d 2 -i 0.5
```
```
        # Estimante RTT with target node 2. Send 10 ping message every 0.2 seconds.
        axiom-ping -d 2 -c 10 -i 0.2
```
 * axiom-netperf
    + estimate the throughput between two nodes
```
        example:
        # Estimate the throughput with targat node 3, sending 512 KBytes of data.
        axiom-netperf -d 3 -l 512K
```
```
        # Estimate the throughput with targat node 3, sending 2 MBytes of data.
        axiom-netperf -d 3 -l 2M
```
 * axiom-traceroute
    + print the hops needed to reach a specified target node
```
        example:
        # Print the hops needed to reach the node 1
        axiom-traceroute -d 1
```
 * axiom-[send|recv]-small
     + send/receive Axiom RAW SMALL data to/from a node
```
        examples:
        # receive RAW SMALL message
        axiom-recv-small
```
```
        # send RAW SMALL data to node (node_id=4) with a specified payload
        axiom-send-small -d 4 --payload 987654
```
```
        # send RAW SMALL data to a neighbour directly connected on a local
        # interface (if_id=1) with a specified payload
        axiom-send-small -d 1 --neighbour --payload 987654
```
