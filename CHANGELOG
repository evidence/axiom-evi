                            AXIOM NIC Changelog
==============================================================================

The following is the list of the main tags of the repository:

## axiom-v0.10
* axiom-nic
    + add support to no-blocking RDMA operation
    + some code cleanup
    + fix RDMA code
    + fix API docs
* QEMU
    + add parameter to enqueue overflow LONG messages
* User space library
    + add support to no-blocking RDMA operation
    + compiled as Shared Library
    + fix headers dependency and Makefiles
* Memory allocator
    + fix headers dependency and Makefiles
* GASNet
    + add initially implementation of axiom-conduit
* OmpSS
    + add support to axiom-conduit

## axiom-v0.9
* axiom-nic
    + add multiple chrdev to handle poll/select
    + add iovec support on send/recv functions
    + add support of new axiom-allocator
    + add debug IOCTLs
    + fix RDMA kthread worker
    + fix NOBLOCK support on RDMA operations
    + fix LONG implementation
* QEMU
    + new registers layout discussed with FORTH:
        - removed ACKIRQ register
        - change size of RAW and RDMA DESC registers
        - add new AVLIRQ register to set IRQ threshold
    + fix handling of packet loss
    + add 2 internal queues to handle RAW and RDMA packets
* User space library
    + add new APIs
        - axiom_recv()/axiom_send() to send/recv RAW or LONG depending on the
          size
        - axiom_get_fds() to be used on poll/select
        - IOV API to send/recv RAW or LONG
    + small change in the RDMA API
    + small bug fix
* User space applications
    + axiom-init
        - change master ID to 1 (configurable at compile time)
        - add L1 allocator support
    + axiom-netperf
        - add LONG message support
    + axiom-run
        - add RPC API to talk with axiom-run master
        - add L2 allocator support
        - add allocator service
    + use of generic axiom_recv()/axiom_send() on several applications
    + use of IOV send/recv API on several applications
    + small bug fix
* Memory allocator
    + add initially implementation of 3 level axiom-allocator
        - L1 and L2 protocol
        - L3 support of multiple implementation (HW or SW)
        - L3 SW implementation (based on LMM)

## axiom-v0.8
* axiom-nic
    + add LONG message driver support
    + add error flag in the packet header
* QEMU
    + add LONG message emulation
    + fix QEMU reordering bug (will be included in QEMU 2.8)
    + fix RDMA bugs
* User space library
    + add LONG APIs:
        - axiom_send_long() / axiom_send_long_avail()
        - axiom_recv_long() / axiom_recv_long_avail()
        - axiom_flush_long()
    + add axiom-init library
    + add axiom-run library
    + small bug fix
* User space applications
    + add axiom-init spawn service
    + add common utilities library
    + add axiom-run:
        - spawner of applications on multiple nodes
    + add axiom-send/axiom-recv:
        - send/receive raw and long messages
    + small bug fix

## axiom-v0.7
* axiom-nic
    + add RDMA driver support (RDMA zone currently handled internally, to be
    changed in future releases)
    + add kernel threads in the driver to dequeue packets
    + add multiple waitqueue (one per port)
    + add unique message ID in each packets (RAW and RDMA)
* QEMU
    + add RDMA emulation support
    + fix qemu backend reordering issue (patch sent to qemu-devel mailing list)
* User space library
    + add RDMA APIs:
        - axiom_rdma_write()
        - axiom_rdma_read()
        - axiom_rdma_mmap() / axiom_rdma_unmmap()
        - axiom_set_flags() / axiom_unset_flags()
    + add AXIOM_PORT_ANY to bind a random port available
    + add new flags: AXIOM_FLAGS_NOBLOCK and AXIOM_FLAG_NOFLUSH
    + small bug fixes
* User space applications
    + axiom-rdma
        - new application to use RDMA features of Axiom NIC
    + axiom-netpef
        - add new test with RDMA messages
* axiom_switch
    + add RDMA forwarding support
* Documentation
    + update datasheet and documentation following latest specification agreed
      with FORTH

## axiom-v0.6
* axiom-nic / QEMU
    + new registers layout provided by FORTH:
        - only one descriptor per queue memory mapped to the CPU
        - queues handled internally in HW
        - change some registers name and offset
    + RAW payload extended to 128 byte
* User space library
    + change name in libaxiom_user_api.a
    + add no-blocking I/O support
    + use IOCTL to send/recv messages
    + add new APIs:
        - axiom_get_num_nodes()
        - axiom_send_raw_avail() / axiom_recv_raw_avail()
        - axiom_flush_raw()
    + small bug fixes
* User space applications
    + axiom-netperf
        - add more statistics
        - use new payload size to increase the performance
    + axiom-info
        - print more information
    + axiom-send-raw / axiom-recv-raw
        - add support to non-blocking I/O
        - more useful parameters
        - payload specified as a list of bytes
    + axiom-init
        - fix routing table overwrite
    + axiom-ping
        - improve code using separated thread to send messages

## axiom-v0.5
* 64 bit support
    + Ultrascale+ emulation in QEMU
    + Axiom-NIC for 64 bit architecture
    + User-Space application for 64 bit architecture
* Doxygen documentation
    + axiom-evi-nic and axiom-evi-apps doxygen documentation

## axiom-v0.4
* user space applications
    + axiom-init deamon to respond to ping/netperf/traceroute messages
    + axiom-info
    + axiom-ping
    + axiom-traceroute
    + axiom-netperf
* axiom-nic
    + support for bind and port forwarding
* axiom_switch
    + mesh-2D topology auto-generation
    + additional topology support from file
    + communicate to QEMU the connected interface
* QEMU
    + fixed socket backend to avoid packet loss
    + support of control packet from the axiom_switch
* other small fixes

## axiom-v0.3.1
* small fixes
* first public release to the AXIOM partners

## axiom-v0.3
* QEMU
    + support for the register specification in the frontend
    + support for backend connection with the axiom-switch with sockets
* axiom-nic
    + revised register specification following discussions with FORTH
    + support limited to small raw/neighbor messages
    + no support for bind and port forwarding
    + functionalities exported using ioctl
* axiom switch
    + used to simulate the topology outside QEMU (see the video of v0.3 for more info)
    + limit to 2 connectors per board
    + topology available is currently only ring
    + some additional topologies (experimental) not available from command line
* user space applications
    + axiom-init working, with discovery, routing calculation and delivery
    + axiom-whoami
    + axiom-send-small
    + axiom-recv-small
* '''not recommended for usage''' (use the 0.3.1)

## v0.2
* revised specification with first implementation of the driver
* non-working stub in QEMU
* '''not recommended for usage'''

## v0.1
* first version started from FORTH specifications v5
* available only in the axiom-evi-nic repo, only specs without implementation
* '''not recommended for usage'''

